name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  ANSIBLE_FORCE_COLOR: 1
  PYTHONUNBUFFERED: 1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint molecule docker

      - name: Lint Ansible playbooks
        run: |
          ansible-lint playbooks/ roles/
          yamllint .

      - name: Validate Ansible syntax
        run: |
          ansible-playbook --syntax-check playbooks/deploy-staging.yml
          ansible-playbook --syntax-check playbooks/deploy-production.yml

      - name: Run Molecule tests
        run: |
          cd roles/webserver
          molecule test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to staging
        run: |
          ansible-playbook -i inventories/staging/hosts.yml playbooks/deploy-staging.yml \
            --private-key ~/.ssh/staging_key \
            --extra-vars "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"

      - name: Run post-deployment tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test web server
          curl -f http://${{ secrets.STAGING_HOST }}/health
          
          # Test monitoring
          curl -f http://${{ secrets.STAGING_HOST }}:9090/-/healthy
          curl -f http://${{ secrets.STAGING_HOST }}:3000/api/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/prod_key
          chmod 600 ~/.ssh/prod_key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production
        run: |
          ansible-playbook -i inventories/production/hosts.yml playbooks/deploy-production.yml \
            --private-key ~/.ssh/prod_key \
            --extra-vars "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"

      - name: Run production health checks
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Test web server with SSL
          curl -f -k https://${{ secrets.PRODUCTION_HOST }}/health
          
          # Test monitoring
          curl -f http://${{ secrets.PRODUCTION_HOST }}:9090/-/healthy
          curl -f http://${{ secrets.PRODUCTION_HOST }}:3000/api/health

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment completed successfully!"
          # Add Slack/Discord notification here if needed

  rollback:
    name: Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/prod_key
          chmod 600 ~/.ssh/prod_key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Rollback deployment
        run: |
          # This would trigger a rollback to the previous version
          echo "Rollback triggered due to deployment failure"
          # Add rollback logic here 