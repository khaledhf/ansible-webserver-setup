---
# Update package cache
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags: [packages, update]

# Install required packages
- name: Install required packages
  apt:
    name:
      - nginx
      - curl
      - htop
      - vim
      - unzip
      - fail2ban
      - ufw
      - certbot
      - python3-certbot-nginx
      - prometheus-node-exporter
    state: present
  tags: [packages, install]

# Configure firewall
- name: Configure UFW firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop: "{{ allowed_ports }}"
  when: ufw_enabled
  tags: [security, firewall]

- name: Enable UFW
  ufw:
    state: enabled
    policy: deny
  when: ufw_enabled
  tags: [security, firewall]

# Configure Nginx
- name: Create Nginx configuration directory
  file:
    path: "{{ nginx_conf_dir }}/conf.d"
    state: directory
    mode: '0755'
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
  tags: [nginx, config]

- name: Configure Nginx main configuration
  template:
    src: nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/nginx.conf"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: restart nginx
  tags: [nginx, config]

- name: Configure Nginx site
  template:
    src: site.conf.j2
    dest: "{{ nginx_sites_available }}/{{ app_name }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: restart nginx
  tags: [nginx, config]

- name: Enable Nginx site
  file:
    src: "{{ nginx_sites_available }}/{{ app_name }}"
    dest: "{{ nginx_sites_enabled }}/{{ app_name }}"
    state: link
  notify: restart nginx
  tags: [nginx, config]

# Deploy application
- name: Create web root directory
  file:
    path: /var/www/{{ app_name }}
    state: directory
    mode: '0755'
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
  tags: [app, deploy]

- name: Deploy index.html
  template:
    src: index.html.j2
    dest: /var/www/{{ app_name }}/index.html
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: restart nginx
  tags: [app, deploy]

# Configure SSL if enabled
- name: Generate self-signed SSL certificate
  command: >
    openssl req -x509 -nodes -days 365 -newkey rsa:2048
    -keyout {{ ssl_key_path }}/{{ ssl_key_file }}
    -out {{ ssl_cert_path }}/{{ ssl_cert_file }}
    -subj "/C=US/ST=State/L=City/O=Organization/CN={{ ansible_hostname }}"
  args:
    creates: "{{ ssl_cert_path }}/{{ ssl_cert_file }}"
  when: ssl_enabled
  tags: [ssl, security]

# Configure monitoring
- name: Configure Node Exporter
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: '0644'
  notify: restart node_exporter
  tags: [monitoring, node_exporter]

- name: Enable and start Node Exporter
  systemd:
    name: node_exporter
    state: started
    enabled: yes
    daemon_reload: yes
  tags: [monitoring, node_exporter]

# Configure Fail2ban
- name: Configure Fail2ban for Nginx
  template:
    src: nginx-req-limit.conf.j2
    dest: /etc/fail2ban/filter.d/nginx-req-limit.conf
    mode: '0644'
  when: fail2ban_enabled
  notify: restart fail2ban
  tags: [security, fail2ban]

- name: Configure Fail2ban jail
  template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
    mode: '0644'
  when: fail2ban_enabled
  notify: restart fail2ban
  tags: [security, fail2ban]

# Final tasks
- name: Ensure Nginx is running
  systemd:
    name: nginx
    state: started
    enabled: yes
  tags: [nginx, service]

- name: Check Nginx configuration
  command: nginx -t
  register: nginx_test
  changed_when: false
  tags: [nginx, test]

- name: Display Nginx status
  debug:
    msg: "Nginx is running on {{ ansible_hostname }}"
  tags: [nginx, status]
